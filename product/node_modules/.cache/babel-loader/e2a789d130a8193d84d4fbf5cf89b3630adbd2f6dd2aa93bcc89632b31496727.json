{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Swal from 'sweetalert2';\nimport './Information.css';\nconst Information = ({\n  userId,\n  triggerButton\n}) => {\n  _s();\n  const [topRecommendations, setTopRecommendations] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [scoringDetails, setScoringDetails] = useState({\n    ratingCountRanges: [],\n    calculationDetails: []\n  });\n  useEffect(() => {\n    if (userId) fetchTopRecommendations(userId);\n  }, [userId]);\n  const formatNumber = num => {\n    return num.toLocaleString('en-US', {\n      maximumFractionDigits: 0\n    });\n  };\n  const smartRoundUp = value => {\n    const digits = value.toString().length;\n    const base = Math.pow(10, digits - 1);\n    const rounded = Math.ceil(value / base) * base;\n    return Math.ceil(rounded / 10000) * 10000; // Always round to nearest 10,000\n  };\n  const fetchTopRecommendations = async userId => {\n    setLoading(true);\n    try {\n      const response = await fetch(`http://localhost:9005/api/users/personalRecomm?user_id=${userId}`);\n      if (!response.ok) throw new Error(`API error: ${response.status}`);\n      const data = await response.json();\n      const processedData = calculateScores(data);\n      setTopRecommendations(processedData.topFive);\n      setScoringDetails({\n        ratingCountRanges: processedData.ratingCountRanges,\n        calculationDetails: processedData.calculationDetails\n      });\n    } catch (err) {\n      setError(err.message);\n      setTopRecommendations([]);\n      setScoringDetails({\n        ratingCountRanges: [],\n        calculationDetails: []\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n  const calculateScores = products => {\n    if (!products || products.length === 0) return {\n      topFive: [],\n      ratingCountRanges: [],\n      calculationDetails: []\n    };\n    const sanitized = products.map(p => ({\n      ...p,\n      productId: p.productId || `product-${Math.random().toString(36).substr(2, 9)}`,\n      productName: p.productName || p.title || 'Unknown Product',\n      brand: p.brand || p.brandName || 'Unknown Brand',\n      rating: p.rating || p.averageRating || 0,\n      ratingCount: p.ratingCount || p.ratingNumber || p.userCount || 0,\n      price: p.price || 0\n    }));\n    const max = Math.max(...sanitized.map(p => p.ratingCount));\n    const roundedMax = smartRoundUp(max);\n    const binSize = Math.floor(roundedMax / 10);\n    const ranges = Array.from({\n      length: 10\n    }, (_, i) => {\n      const min = i * binSize;\n      const maxVal = (i + 1) * binSize - 1;\n      return {\n        range: `${formatNumber(maxVal)} - ${formatNumber(min)}`,\n        points: parseFloat(((i + 1) * 0.5).toFixed(1))\n      };\n    }).reverse();\n    const calculationDetails = sanitized.map(product => {\n      var _ranges$find;\n      const ratingCountScore = ((_ranges$find = ranges.find(r => {\n        const [maxVal, minVal] = r.range.split(' - ').map(s => parseInt(s.replace(/,/g, '')));\n        return product.ratingCount >= minVal && product.ratingCount <= maxVal;\n      })) === null || _ranges$find === void 0 ? void 0 : _ranges$find.points) || 0;\n      const ratingScore = parseFloat(product.rating.toFixed(1));\n      const totalScore = parseFloat((ratingCountScore * 1.4 + ratingScore * 0.6).toFixed(1));\n      return {\n        ...product,\n        ratingScore,\n        ratingCountScore,\n        totalScore\n      };\n    }).sort((a, b) => b.totalScore - a.totalScore || b.ratingCount - a.ratingCount);\n    calculationDetails.forEach((p, i) => p.rank = i + 1);\n    return {\n      topFive: calculationDetails.slice(0, 5),\n      ratingCountRanges: ranges,\n      calculationDetails\n    };\n  };\n  const showModal = () => {\n    Swal.fire({\n      title: 'Personal Recommendation Summary',\n      html: `\n<div style=\"text-align: left; max-height: 70vh; overflow-y: auto;\">\n  <h3 class=\"info-heading\">How Our Recommendation Works</h3>\n  <p>We analyze your highly rated products to identify specific leaf-level categories you've shown preference for. Then we find similar users who also rated products in these same categories with similar ratings. Here's how it works:</p>\n\n  <ol>\n    <li><strong>Step 1: Identify Highly Rated Products</strong><br />\n      We begin by identifying products you've rated <b>3 stars or more</b>.</li>\n    <li><strong>Step 2: Extract Leaf-Level Category</strong><br />\n      For each product, we extract the most specific categories (leaf categories) that best define the product type.</li>\n    <li><strong>Step 3: Find Similar Users</strong><br />\n      We then find similar users who rated products in the same leaf categories with same rating or more than that rating. For example, if you gave a product 4 stars, we find users who rated products in the same category , 4 and 4+ ratings.</li>\n    <li><strong>Step 4: Filter Already Rated Products</strong><br />\n      We ensure that no products you've already rated are included in the recommendations. This guarantees that the suggestions are fresh and new to you.</li>\n    <li><strong>Step 5: Recommend New Products</strong><br />\n      Finally, we recommend new products based on rating quality and popularity. These are products that similar users have rated highly, but you haven't rated yet.</li>\n  </ol>\n\n  <h3 class=\"info-heading\">Scoring Pattern</h3>\n  <div style=\"background-color: #f5f5f5; padding: 10px; border-radius: 5px;\">\n    <h4>Rating Count Range</h4>\n    <ul>\n      ${scoringDetails.ratingCountRanges.map(r => `<li>${r.range}: ${r.points} points</li>`).join('') || '<li>No data available</li>'}\n    </ul>\n  </div>\n\n  <h3 class=\"info-heading\">Top 5 Recommendations with Scores</h3>\n  <table class=\"info-table\">\n    <thead>\n      <tr>\n        <th>Product</th>\n        <th>Rating Count</th>\n        <th>Rating Score</th>\n        <th>Avg Rating</th>\n        <th>Total Score<br><p>(Rating Score * 1.4<br> +<br> Avg Rating * 0.6)</p></th>\n      </tr>\n    </thead>\n    <tbody>\n      ${topRecommendations.length > 0 ? topRecommendations.map(product => `\n        <tr>\n          <td title=\"${product.productName}\" style=\"max-width:200px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;\">${product.productName}</td>\n          <td>${formatNumber(product.ratingCount)}</td>\n          <td>${product.ratingCountScore}</td>\n          <td>${product.ratingScore}</td>\n          <td class=\"total-score\">${product.totalScore}</td>\n        </tr>\n      `).join('') : '<tr><td colspan=\"6\" style=\"text-align:center\">No recommendations available</td></tr>'}\n    </tbody>\n  </table>\n</div>\n\n      `,\n      width: 800,\n      confirmButtonText: 'Done!',\n      confirmButtonColor: '#046e8f'\n    });\n  };\n  return triggerButton ? /*#__PURE__*/React.cloneElement(triggerButton, {\n    onClick: showModal\n  }) : null;\n};\n_s(Information, \"PDfYok0VM4+93IALp8QeN+9LJRM=\");\n_c = Information;\nexport default Information;\nvar _c;\n$RefreshReg$(_c, \"Information\");","map":{"version":3,"names":["React","useState","useEffect","Swal","Information","userId","triggerButton","_s","topRecommendations","setTopRecommendations","loading","setLoading","error","setError","scoringDetails","setScoringDetails","ratingCountRanges","calculationDetails","fetchTopRecommendations","formatNumber","num","toLocaleString","maximumFractionDigits","smartRoundUp","value","digits","toString","length","base","Math","pow","rounded","ceil","response","fetch","ok","Error","status","data","json","processedData","calculateScores","topFive","err","message","products","sanitized","map","p","productId","random","substr","productName","title","brand","brandName","rating","averageRating","ratingCount","ratingNumber","userCount","price","max","roundedMax","binSize","floor","ranges","Array","from","_","i","min","maxVal","range","points","parseFloat","toFixed","reverse","product","_ranges$find","ratingCountScore","find","r","minVal","split","s","parseInt","replace","ratingScore","totalScore","sort","a","b","forEach","rank","slice","showModal","fire","html","join","width","confirmButtonText","confirmButtonColor","cloneElement","onClick","_c","$RefreshReg$"],"sources":["C:/Neo4J/Product-main/Product-main/product/src/components/Information.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Swal from 'sweetalert2';\nimport './Information.css';\n\nconst Information = ({ userId, triggerButton }) => {\n  const [topRecommendations, setTopRecommendations] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [scoringDetails, setScoringDetails] = useState({\n    ratingCountRanges: [],\n    calculationDetails: []\n  });\n\n  useEffect(() => {\n    if (userId) fetchTopRecommendations(userId);\n  }, [userId]);\n\n  const formatNumber = (num) => {\n    return num.toLocaleString('en-US', { maximumFractionDigits: 0 });\n  };\n\n  const smartRoundUp = (value) => {\n    const digits = value.toString().length;\n    const base = Math.pow(10, digits - 1);\n    const rounded = Math.ceil(value / base) * base;\n    return Math.ceil(rounded / 10000) * 10000; // Always round to nearest 10,000\n  };\n\n  const fetchTopRecommendations = async (userId) => {\n    setLoading(true);\n    try {\n      const response = await fetch(`http://localhost:9005/api/users/personalRecomm?user_id=${userId}`);\n      if (!response.ok) throw new Error(`API error: ${response.status}`);\n      const data = await response.json();\n      const processedData = calculateScores(data);\n      setTopRecommendations(processedData.topFive);\n      setScoringDetails({\n        ratingCountRanges: processedData.ratingCountRanges,\n        calculationDetails: processedData.calculationDetails\n      });\n    } catch (err) {\n      setError(err.message);\n      setTopRecommendations([]);\n      setScoringDetails({ ratingCountRanges: [], calculationDetails: [] });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const calculateScores = (products) => {\n    if (!products || products.length === 0) return { topFive: [], ratingCountRanges: [], calculationDetails: [] };\n\n    const sanitized = products.map(p => ({\n      ...p,\n      productId: p.productId || `product-${Math.random().toString(36).substr(2, 9)}`,\n      productName: p.productName || p.title || 'Unknown Product',\n      brand: p.brand || p.brandName || 'Unknown Brand',\n      rating: p.rating || p.averageRating || 0,\n      ratingCount: p.ratingCount || p.ratingNumber || p.userCount || 0,\n      price: p.price || 0\n    }));\n\n    const max = Math.max(...sanitized.map(p => p.ratingCount));\n    const roundedMax = smartRoundUp(max);\n    const binSize = Math.floor(roundedMax / 10);\n\n    const ranges = Array.from({ length: 10 }, (_, i) => {\n      const min = i * binSize;\n      const maxVal = (i + 1) * binSize - 1;\n      return {\n        range: `${formatNumber(maxVal)} - ${formatNumber(min)}`,\n        points: parseFloat(((i + 1) * 0.5).toFixed(1))\n      };\n    }).reverse();\n\n    const calculationDetails = sanitized.map(product => {\n      const ratingCountScore = ranges.find(r => {\n        const [maxVal, minVal] = r.range.split(' - ').map(s => parseInt(s.replace(/,/g, '')));\n        return product.ratingCount >= minVal && product.ratingCount <= maxVal;\n      })?.points || 0;\n\n      const ratingScore = parseFloat(product.rating.toFixed(1));\n      const totalScore = parseFloat((ratingCountScore * 1.4 + ratingScore * 0.6).toFixed(1));\n\n      return {\n        ...product,\n        ratingScore,\n        ratingCountScore,\n        totalScore\n      };\n    }).sort((a, b) => b.totalScore - a.totalScore || b.ratingCount - a.ratingCount);\n\n    calculationDetails.forEach((p, i) => p.rank = i + 1);\n\n    return {\n      topFive: calculationDetails.slice(0, 5),\n      ratingCountRanges: ranges,\n      calculationDetails\n    };\n  };\n\n  const showModal = () => {\n    Swal.fire({\n      title: 'Personal Recommendation Summary',\n      html: `\n<div style=\"text-align: left; max-height: 70vh; overflow-y: auto;\">\n  <h3 class=\"info-heading\">How Our Recommendation Works</h3>\n  <p>We analyze your highly rated products to identify specific leaf-level categories you've shown preference for. Then we find similar users who also rated products in these same categories with similar ratings. Here's how it works:</p>\n\n  <ol>\n    <li><strong>Step 1: Identify Highly Rated Products</strong><br />\n      We begin by identifying products you've rated <b>3 stars or more</b>.</li>\n    <li><strong>Step 2: Extract Leaf-Level Category</strong><br />\n      For each product, we extract the most specific categories (leaf categories) that best define the product type.</li>\n    <li><strong>Step 3: Find Similar Users</strong><br />\n      We then find similar users who rated products in the same leaf categories with same rating or more than that rating. For example, if you gave a product 4 stars, we find users who rated products in the same category , 4 and 4+ ratings.</li>\n    <li><strong>Step 4: Filter Already Rated Products</strong><br />\n      We ensure that no products you've already rated are included in the recommendations. This guarantees that the suggestions are fresh and new to you.</li>\n    <li><strong>Step 5: Recommend New Products</strong><br />\n      Finally, we recommend new products based on rating quality and popularity. These are products that similar users have rated highly, but you haven't rated yet.</li>\n  </ol>\n\n  <h3 class=\"info-heading\">Scoring Pattern</h3>\n  <div style=\"background-color: #f5f5f5; padding: 10px; border-radius: 5px;\">\n    <h4>Rating Count Range</h4>\n    <ul>\n      ${scoringDetails.ratingCountRanges.map(r => `<li>${r.range}: ${r.points} points</li>`).join('') || '<li>No data available</li>'}\n    </ul>\n  </div>\n\n  <h3 class=\"info-heading\">Top 5 Recommendations with Scores</h3>\n  <table class=\"info-table\">\n    <thead>\n      <tr>\n        <th>Product</th>\n        <th>Rating Count</th>\n        <th>Rating Score</th>\n        <th>Avg Rating</th>\n        <th>Total Score<br><p>(Rating Score * 1.4<br> +<br> Avg Rating * 0.6)</p></th>\n      </tr>\n    </thead>\n    <tbody>\n      ${topRecommendations.length > 0 ? topRecommendations.map(product => `\n        <tr>\n          <td title=\"${product.productName}\" style=\"max-width:200px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;\">${product.productName}</td>\n          <td>${formatNumber(product.ratingCount)}</td>\n          <td>${product.ratingCountScore}</td>\n          <td>${product.ratingScore}</td>\n          <td class=\"total-score\">${product.totalScore}</td>\n        </tr>\n      `).join('') : '<tr><td colspan=\"6\" style=\"text-align:center\">No recommendations available</td></tr>'}\n    </tbody>\n  </table>\n</div>\n\n      `,\n      width: 800,\n      confirmButtonText: 'Done!',\n      confirmButtonColor: '#046e8f',\n    });\n  };\n\n  return triggerButton ? React.cloneElement(triggerButton, { onClick: showModal }) : null;\n};\n\nexport default Information;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}