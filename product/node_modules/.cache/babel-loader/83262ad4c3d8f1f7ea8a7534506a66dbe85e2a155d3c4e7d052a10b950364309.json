{"ast":null,"code":"import React from 'react';\nimport Swal from 'sweetalert2';\nimport './Info.css'; // Assuming the same CSS file is used\n\nconst UserRecommInfo = ({\n  recommendations,\n  triggerButton\n}) => {\n  // Show the modal with information on how recommendations work\n  const showUserInfoModal = () => {\n    Swal.fire({\n      title: 'User-Based Recommendation Summary',\n      html: `\n        <div style=\"text-align: left; max-height: 70vh; overflow-y: auto;\">\n          <h3 class=\"info-heading\">How User-Based Recommendations Work</h3>\n          <p>Our user-based recommendation system analyzes user behavior to suggest products that best match your interests. Here's how it works:</p>\n\n          <ol>\n            <li><strong>Step 1: Find Other Users with Similar Ratings</strong><br />\n              We identify users who rated the same product as you.</li>\n            <li><strong>Step 2: Fetch Products Rated by These Users</strong><br />\n              We fetch products rated by these users within the same category as the product you viewed.</li>\n            <li><strong>Step 3: Filter Out Already Rated Products</strong><br />\n              We filter out products you’ve already rated to avoid recommending them again.</li>\n            <li><strong>Step 4: Rank Products by Popularity</strong><br />\n              Products are ranked by how many users rated them, prioritizing more popular products.</li>\n            <li><strong>Step 5: Recommend Top Products</strong><br />\n              We recommend the top products based on the number of users who rated them and their overall ratings.</li>\n          </ol>\n\n          <h3 class=\"info-heading\">Scoring Pattern</h3>\n          <p>Recommendations are ranked based on user ratings and interactions with the product:</p>\n          <ul>\n            <li><strong>Same Rating Count:</strong> 5 points</li>\n            <li><strong>High Interaction Count:</strong> 4 points</li>\n            <li><strong>Low Interaction Count:</strong> 3 points</li>\n          </ul>\n\n          <h3 class=\"info-heading\">Top 5 Recommendations with Scores</h3>\n          <div class=\"info-table-container\">\n            <table class=\"info-table\">\n              <thead>\n                <tr>\n                  <th>Product</th>\n                  <th>Rating Count</th>\n                  <th>Rating Score</th>\n                  <th>Avg Rating</th>\n                  <th>Total Score <p>(Rating Score * 1.4 <br>+<br> Avg Rating * 0.6)</p></th>\n                </tr>\n              </thead>\n              <tbody>\n                ${recommendations.length > 0 ? recommendations.map(product => {\n        return `\n                    <tr>\n                      <td title=\"${product.title}\" style=\"max-width:200px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;\">\n                        ${product.title}\n                      </td>\n                      <td>${product.ratingCount}</td>\n                      <td>${product.ratingScore}</td>\n                      <td>${product.avgRating}</td>\n                      <td class=\"total-score\">${product.totalScore}</td>\n                    </tr>\n                  `;\n      }).join('') : '<tr><td colspan=\"5\" style=\"text-align:center\">No recommendations available</td></tr>'}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      `,\n      width: 800,\n      confirmButtonText: 'Done!',\n      confirmButtonColor: '#046e8f'\n    });\n  };\n  return triggerButton ? /*#__PURE__*/React.cloneElement(triggerButton, {\n    onClick: showUserInfoModal\n  }) : null;\n};\n_c = UserRecommInfo;\nexport default UserRecommInfo;\nvar _c;\n$RefreshReg$(_c, \"UserRecommInfo\");","map":{"version":3,"names":["React","Swal","UserRecommInfo","recommendations","triggerButton","showUserInfoModal","fire","title","html","length","map","product","ratingCount","ratingScore","avgRating","totalScore","join","width","confirmButtonText","confirmButtonColor","cloneElement","onClick","_c","$RefreshReg$"],"sources":["C:/Users/sunwa/Downloads/git/git1/Product/product/src/components/UserRecommInfo.js"],"sourcesContent":["import React from 'react';\r\nimport Swal from 'sweetalert2';\r\nimport './Info.css'; // Assuming the same CSS file is used\r\n\r\nconst UserRecommInfo = ({ recommendations, triggerButton }) => {\r\n  // Show the modal with information on how recommendations work\r\n  const showUserInfoModal = () => {\r\n    Swal.fire({\r\n      title: 'User-Based Recommendation Summary',\r\n      html: `\r\n        <div style=\"text-align: left; max-height: 70vh; overflow-y: auto;\">\r\n          <h3 class=\"info-heading\">How User-Based Recommendations Work</h3>\r\n          <p>Our user-based recommendation system analyzes user behavior to suggest products that best match your interests. Here's how it works:</p>\r\n\r\n          <ol>\r\n            <li><strong>Step 1: Find Other Users with Similar Ratings</strong><br />\r\n              We identify users who rated the same product as you.</li>\r\n            <li><strong>Step 2: Fetch Products Rated by These Users</strong><br />\r\n              We fetch products rated by these users within the same category as the product you viewed.</li>\r\n            <li><strong>Step 3: Filter Out Already Rated Products</strong><br />\r\n              We filter out products you’ve already rated to avoid recommending them again.</li>\r\n            <li><strong>Step 4: Rank Products by Popularity</strong><br />\r\n              Products are ranked by how many users rated them, prioritizing more popular products.</li>\r\n            <li><strong>Step 5: Recommend Top Products</strong><br />\r\n              We recommend the top products based on the number of users who rated them and their overall ratings.</li>\r\n          </ol>\r\n\r\n          <h3 class=\"info-heading\">Scoring Pattern</h3>\r\n          <p>Recommendations are ranked based on user ratings and interactions with the product:</p>\r\n          <ul>\r\n            <li><strong>Same Rating Count:</strong> 5 points</li>\r\n            <li><strong>High Interaction Count:</strong> 4 points</li>\r\n            <li><strong>Low Interaction Count:</strong> 3 points</li>\r\n          </ul>\r\n\r\n          <h3 class=\"info-heading\">Top 5 Recommendations with Scores</h3>\r\n          <div class=\"info-table-container\">\r\n            <table class=\"info-table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Product</th>\r\n                  <th>Rating Count</th>\r\n                  <th>Rating Score</th>\r\n                  <th>Avg Rating</th>\r\n                  <th>Total Score <p>(Rating Score * 1.4 <br>+<br> Avg Rating * 0.6)</p></th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                ${recommendations.length > 0 ? recommendations.map(product => {\r\n                  return `\r\n                    <tr>\r\n                      <td title=\"${product.title}\" style=\"max-width:200px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;\">\r\n                        ${product.title}\r\n                      </td>\r\n                      <td>${product.ratingCount}</td>\r\n                      <td>${product.ratingScore}</td>\r\n                      <td>${product.avgRating}</td>\r\n                      <td class=\"total-score\">${product.totalScore}</td>\r\n                    </tr>\r\n                  `;\r\n                }).join('') : '<tr><td colspan=\"5\" style=\"text-align:center\">No recommendations available</td></tr>'}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      `,\r\n      width: 800,\r\n      confirmButtonText: 'Done!',\r\n      confirmButtonColor: '#046e8f',\r\n    });\r\n  };\r\n\r\n  return triggerButton\r\n    ? React.cloneElement(triggerButton, {\r\n        onClick: showUserInfoModal\r\n      })\r\n    : null;\r\n};\r\n\r\nexport default UserRecommInfo;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,aAAa;AAC9B,OAAO,YAAY,CAAC,CAAC;;AAErB,MAAMC,cAAc,GAAGA,CAAC;EAAEC,eAAe;EAAEC;AAAc,CAAC,KAAK;EAC7D;EACA,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC9BJ,IAAI,CAACK,IAAI,CAAC;MACRC,KAAK,EAAE,mCAAmC;MAC1CC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkBL,eAAe,CAACM,MAAM,GAAG,CAAC,GAAGN,eAAe,CAACO,GAAG,CAACC,OAAO,IAAI;QAC5D,OAAO;AACzB;AACA,mCAAmCA,OAAO,CAACJ,KAAK;AAChD,0BAA0BI,OAAO,CAACJ,KAAK;AACvC;AACA,4BAA4BI,OAAO,CAACC,WAAW;AAC/C,4BAA4BD,OAAO,CAACE,WAAW;AAC/C,4BAA4BF,OAAO,CAACG,SAAS;AAC7C,gDAAgDH,OAAO,CAACI,UAAU;AAClE;AACA,mBAAmB;MACH,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,GAAG,sFAAsF;AACpH;AACA;AACA;AACA;AACA,OAAO;MACDC,KAAK,EAAE,GAAG;MACVC,iBAAiB,EAAE,OAAO;MAC1BC,kBAAkB,EAAE;IACtB,CAAC,CAAC;EACJ,CAAC;EAED,OAAOf,aAAa,gBAChBJ,KAAK,CAACoB,YAAY,CAAChB,aAAa,EAAE;IAChCiB,OAAO,EAAEhB;EACX,CAAC,CAAC,GACF,IAAI;AACV,CAAC;AAACiB,EAAA,GAzEIpB,cAAc;AA2EpB,eAAeA,cAAc;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}