{"ast":null,"code":"import React from 'react';\nimport Swal from 'sweetalert2';\nimport './Info.css';\n\n// Format number with commas\nconst formatNumber = num => new Intl.NumberFormat('en-US', {\n  maximumFractionDigits: 0\n}).format(num);\n\n// Calculate priority score based on the provided rules\nconst calculatePriorityScore = product => {\n  const priority = product.priority || 4;\n\n  // Priority score mapping\n  let brandScore = 0;\n  let categoryScore = 0;\n  switch (priority) {\n    case 1:\n      // Same brand, same category\n      brandScore = 5;\n      categoryScore = 5;\n      break;\n    case 2:\n      // Different brand, same category\n      brandScore = 3;\n      categoryScore = 5;\n      break;\n    case 3:\n      // Same brand, different category\n      brandScore = 5;\n      categoryScore = 4;\n      break;\n    case 4:\n      // Different brand, different category\n      brandScore = 3;\n      categoryScore = 4;\n      break;\n    default:\n      brandScore = 0;\n      categoryScore = 0;\n  }\n  const totalScore = parseFloat((brandScore + categoryScore).toFixed(1));\n  return {\n    brandScore,\n    categoryScore,\n    priority,\n    totalScore\n  };\n};\nconst showInfoModal = recommendations => {\n  var _top5Recommendations$, _top5Recommendations$2;\n  // Get top 5 recommendations for the table\n  const top5Recommendations = recommendations !== null && recommendations !== void 0 && recommendations.data ? recommendations.data.filter(product => product && product.parentAsin && product.image && product.title).slice(0, 5) : [];\n  const brandName = ((_top5Recommendations$ = top5Recommendations[0]) === null || _top5Recommendations$ === void 0 ? void 0 : _top5Recommendations$.brandName) || 'this brand';\n  const categoryName = ((_top5Recommendations$2 = top5Recommendations[0]) === null || _top5Recommendations$2 === void 0 ? void 0 : _top5Recommendations$2.categoryName) || 'this category';\n  Swal.fire({\n    title: 'Brand Based Recommendation Summary',\n    html: `\n      <div style=\"text-align: left; max-height: 70vh; overflow-y: auto;\">\n        <h3 class=\"info-heading\">How Recommendation Works</h3>\n        <p>Our brand based recommendation system blends brand affinity with category relevance to recommend products that might best match your interests. Here's how it works:</p>\n  \n        <ol>\n          <li><strong>Step 1: Identify Your Most Interacted Brand</strong><br />\n            We identify the brand you're currently viewing or have shown interest in, based on your product selection.</li>\n          <li><strong>Step 2: Fetch Highly-Rated Products</strong><br />\n            We find other highly-rated products from that brand and category, ensuring the recommendations are relevant and based on user preferences.</li>\n          <li><strong>Step 3: Filter Out Current Product</strong><br />\n            The product you're currently viewing is filtered out to avoid suggesting the same product.</li>\n          <li><strong>Step 4: Rank Products by Priority</strong><br />\n            We rank products based on priority criteria: same brand & category first, followed by different combinations.</li>\n          <li><strong>Step 5: Recommend Top Products</strong><br />\n            Finally, we return recommendations that might best match your tastes based on brand and category relationships.</li>\n        </ol>\n  \n        <h3 class=\"info-heading\">Scoring Pattern</h3>\n        <div style=\"background-color: #f5f5f5; padding: 10px; border-radius: 5px;\">\n          <h4>Priority Scoring</h4>\n          <ul>\n            <li>Same brand: 5 points</li>\n            <li>Same category: 5 points</li>\n            <li>Different brand: 3 points</li>\n            <li>Different category: 4 points</li>\n          </ul>\n          \n          <h4>Priority Categories</h4>\n          <ul>\n            <li>Priority 1: Same brand, same category - highest relevance</li>\n            <li>Priority 2: Different brand, same category</li>\n            <li>Priority 3: Same brand, different category</li>\n            <li>Priority 4: Different brand, different category</li>\n          </ul>\n        </div>\n  \n        <h3 class=\"info-heading\">Why These Recommendations?</h3>\n        <p>\n          You're seeing products related to <strong>${brandName}</strong> and <strong>${categoryName}</strong> because our system \n          prioritizes products that match the brand and category you're currently viewing.\n        </p>\n  \n        <h3 class=\"info-heading\">Top 5 Recommendations with Scores</h3>\n        <div class=\"info-table-container\">\n          <table class=\"info-table\">\n            <thead>\n              <tr>\n                <th>Product</th>\n                <th>Brand Score</th>\n                <th>Category Score</th>\n                <th>Priority</th>\n                <th>Total Score</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${top5Recommendations.length > 0 ? top5Recommendations.map(product => {\n      const score = calculatePriorityScore(product);\n      return `\n                  <tr>\n                    <td title=\"${product.title}\" style=\"max-width:200px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;\">\n                      ${product.title}\n                    </td>\n                    <td>${score.brandScore}</td>\n                    <td>${score.categoryScore}</td>\n                    <td>${score.priority}</td>\n                    <td class=\"total-score\">\n                      ${score.totalScore}\n                    </td>\n                  </tr>\n                `;\n    }).join('') : '<tr><td colspan=\"5\" style=\"text-align:center\">No recommendations available</td></tr>'}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    `,\n    width: 800,\n    confirmButtonText: 'Done!',\n    confirmButtonColor: '#046e8f'\n  });\n};\nconst BrandCategoryRecommendation = ({\n  recommendations,\n  triggerButton\n}) => {\n  return triggerButton ? /*#__PURE__*/React.cloneElement(triggerButton, {\n    onClick: () => showInfoModal(recommendations)\n  }) : null;\n};\n_c = BrandCategoryRecommendation;\nexport default BrandCategoryRecommendation;\nexport const showBrandCategoryInfo = showInfoModal;\nvar _c;\n$RefreshReg$(_c, \"BrandCategoryRecommendation\");","map":{"version":3,"names":["React","Swal","formatNumber","num","Intl","NumberFormat","maximumFractionDigits","format","calculatePriorityScore","product","priority","brandScore","categoryScore","totalScore","parseFloat","toFixed","showInfoModal","recommendations","_top5Recommendations$","_top5Recommendations$2","top5Recommendations","data","filter","parentAsin","image","title","slice","brandName","categoryName","fire","html","length","map","score","join","width","confirmButtonText","confirmButtonColor","BrandCategoryRecommendation","triggerButton","cloneElement","onClick","_c","showBrandCategoryInfo","$RefreshReg$"],"sources":["C:/Users/sunwa/Downloads/git/git1/Product/product/src/components/BrandCategoryRecommendation.js"],"sourcesContent":["import React from 'react';\r\nimport Swal from 'sweetalert2';\r\nimport './Info.css';\r\n\r\n// Format number with commas\r\nconst formatNumber = (num) =>\r\n  new Intl.NumberFormat('en-US', { maximumFractionDigits: 0 }).format(num);\r\n\r\n// Calculate priority score based on the provided rules\r\nconst calculatePriorityScore = (product) => {\r\n  const priority = product.priority || 4;\r\n  \r\n  // Priority score mapping\r\n  let brandScore = 0;\r\n  let categoryScore = 0;\r\n  \r\n  switch(priority) {\r\n    case 1: // Same brand, same category\r\n      brandScore = 5;\r\n      categoryScore = 5;\r\n      break;\r\n    case 2: // Different brand, same category\r\n      brandScore = 3;\r\n      categoryScore = 5;\r\n      break;\r\n    case 3: // Same brand, different category\r\n      brandScore = 5;\r\n      categoryScore = 4;\r\n      break;\r\n    case 4: // Different brand, different category\r\n      brandScore = 3;\r\n      categoryScore = 4;\r\n      break;\r\n    default:\r\n      brandScore = 0;\r\n      categoryScore = 0;\r\n  }\r\n  \r\n  const totalScore = parseFloat((brandScore + categoryScore).toFixed(1));\r\n  \r\n  return {\r\n    brandScore,\r\n    categoryScore,\r\n    priority,\r\n    totalScore\r\n  };\r\n};\r\n\r\nconst showInfoModal = (recommendations) => {\r\n  // Get top 5 recommendations for the table\r\n  const top5Recommendations = recommendations?.data \r\n    ? recommendations.data\r\n        .filter(product => product && product.parentAsin && product.image && product.title)\r\n        .slice(0, 5)\r\n    : [];\r\n  \r\n  const brandName = top5Recommendations[0]?.brandName || 'this brand';\r\n  const categoryName = top5Recommendations[0]?.categoryName || 'this category';\r\n\r\n  Swal.fire({\r\n    title: 'Brand Based Recommendation Summary',\r\n    html: `\r\n      <div style=\"text-align: left; max-height: 70vh; overflow-y: auto;\">\r\n        <h3 class=\"info-heading\">How Recommendation Works</h3>\r\n        <p>Our brand based recommendation system blends brand affinity with category relevance to recommend products that might best match your interests. Here's how it works:</p>\r\n  \r\n        <ol>\r\n          <li><strong>Step 1: Identify Your Most Interacted Brand</strong><br />\r\n            We identify the brand you're currently viewing or have shown interest in, based on your product selection.</li>\r\n          <li><strong>Step 2: Fetch Highly-Rated Products</strong><br />\r\n            We find other highly-rated products from that brand and category, ensuring the recommendations are relevant and based on user preferences.</li>\r\n          <li><strong>Step 3: Filter Out Current Product</strong><br />\r\n            The product you're currently viewing is filtered out to avoid suggesting the same product.</li>\r\n          <li><strong>Step 4: Rank Products by Priority</strong><br />\r\n            We rank products based on priority criteria: same brand & category first, followed by different combinations.</li>\r\n          <li><strong>Step 5: Recommend Top Products</strong><br />\r\n            Finally, we return recommendations that might best match your tastes based on brand and category relationships.</li>\r\n        </ol>\r\n  \r\n        <h3 class=\"info-heading\">Scoring Pattern</h3>\r\n        <div style=\"background-color: #f5f5f5; padding: 10px; border-radius: 5px;\">\r\n          <h4>Priority Scoring</h4>\r\n          <ul>\r\n            <li>Same brand: 5 points</li>\r\n            <li>Same category: 5 points</li>\r\n            <li>Different brand: 3 points</li>\r\n            <li>Different category: 4 points</li>\r\n          </ul>\r\n          \r\n          <h4>Priority Categories</h4>\r\n          <ul>\r\n            <li>Priority 1: Same brand, same category - highest relevance</li>\r\n            <li>Priority 2: Different brand, same category</li>\r\n            <li>Priority 3: Same brand, different category</li>\r\n            <li>Priority 4: Different brand, different category</li>\r\n          </ul>\r\n        </div>\r\n  \r\n        <h3 class=\"info-heading\">Why These Recommendations?</h3>\r\n        <p>\r\n          You're seeing products related to <strong>${brandName}</strong> and <strong>${categoryName}</strong> because our system \r\n          prioritizes products that match the brand and category you're currently viewing.\r\n        </p>\r\n  \r\n        <h3 class=\"info-heading\">Top 5 Recommendations with Scores</h3>\r\n        <div class=\"info-table-container\">\r\n          <table class=\"info-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Product</th>\r\n                <th>Brand Score</th>\r\n                <th>Category Score</th>\r\n                <th>Priority</th>\r\n                <th>Total Score</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              ${top5Recommendations.length > 0 ? top5Recommendations.map(product => {\r\n                const score = calculatePriorityScore(product);\r\n                return `\r\n                  <tr>\r\n                    <td title=\"${product.title}\" style=\"max-width:200px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;\">\r\n                      ${product.title}\r\n                    </td>\r\n                    <td>${score.brandScore}</td>\r\n                    <td>${score.categoryScore}</td>\r\n                    <td>${score.priority}</td>\r\n                    <td class=\"total-score\">\r\n                      ${score.totalScore}\r\n                    </td>\r\n                  </tr>\r\n                `;\r\n              }).join('') : '<tr><td colspan=\"5\" style=\"text-align:center\">No recommendations available</td></tr>'}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    `,\r\n    width: 800,\r\n    confirmButtonText: 'Done!',\r\n    confirmButtonColor: '#046e8f',\r\n  });\r\n};\r\n\r\nconst BrandCategoryRecommendation = ({ recommendations, triggerButton }) => {\r\n  return triggerButton\r\n    ? React.cloneElement(triggerButton, {\r\n        onClick: () => showInfoModal(recommendations)\r\n      })\r\n    : null;\r\n};\r\n\r\nexport default BrandCategoryRecommendation;\r\nexport const showBrandCategoryInfo = showInfoModal;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}