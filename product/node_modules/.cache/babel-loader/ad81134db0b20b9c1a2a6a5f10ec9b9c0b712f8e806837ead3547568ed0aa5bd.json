{"ast":null,"code":"import React from 'react';\nimport Swal from 'sweetalert2';\nimport './Info.css';\nconst showInfoModal = recommendations => {\n  var _top5Recommendations$;\n  const max = recommendations.length > 0 ? Math.max(...recommendations.map(rec => rec.ratingNumber)) : 0;\n  const topCap = smartRoundUp(max); // clean round-up\n  const step = Math.floor(topCap / 10);\n  const ranges = Array.from({\n    length: 10\n  }, (_, i) => {\n    const min = step * i;\n    const maxVal = step * (i + 1) - 1;\n    return {\n      range: `${formatNumber(maxVal)} - ${formatNumber(min)}`,\n      points: parseFloat(((i + 1) * 0.5).toFixed(1))\n    };\n  }).reverse();\n  const top5Recommendations = recommendations.slice(0, 5);\n  const brandName = ((_top5Recommendations$ = top5Recommendations[0]) === null || _top5Recommendations$ === void 0 ? void 0 : _top5Recommendations$.brandName) || 'this brand';\n  Swal.fire({\n    title: 'User Based Recommendation Summary',\n    html: `\n        <div style=\"text-align: left; max-height: 70vh; overflow-y: auto;\">\n          <h3 class=\"info-heading\">How Recommendations Work</h3>\n          <p>Our user-based recommendation system analyzes user behavior to suggest products that best match your interests. Here's how it works:</p>\n    \n          <ol>\n            <li><strong>Step 1: Find Other Users with Similar Ratings</strong><br />\n              We identify users who rated the same product as you.</li>\n            <li><strong>Step 2: Fetch Products Rated by These Users</strong><br />\n              We fetch products rated by these users within the same category as the product you viewed.</li>\n            <li><strong>Step 3: Filter Out Already Rated Products</strong><br />\n              We filter out products you’ve already rated to avoid recommending them again.</li>\n            <li><strong>Step 4: Rank Products by Popularity</strong><br />\n              Products are ranked by how many users rated them, prioritizing more popular products.</li>\n            <li><strong>Step 5: Recommend Top Products</strong><br />\n              We recommend the top products based on the number of users who rated them and their overall ratings.</li>\n          </ol>\n  \n          <h3 class=\"info-heading\">Scoring Pattern</h3>\n          <p>Recommendations are ranked based on user ratings and interactions with the product:</p>\n          <ul>\n            <li><strong>Same Rating Count:</strong> 5 points</li>\n            <li><strong>High Interaction Count:</strong> 4 points</li>\n            <li><strong>Low Interaction Count:</strong> 3 points</li>\n          </ul>\n  \n          <h3 class=\"info-heading\">Rating Count Range</h3>\n          <ul>\n            ${ranges.map(r => `<li>${r.range}: ${r.points} points</li>`).join('') || '<li>No data available</li>'}\n          </ul>\n  \n          <h3 class=\"info-heading\">Why This Brand?</h3>\n          <p>\n            You're seeing products from <strong>${brandName}</strong> because our analysis shows it's the brand most frequently interacted with by users who share similar ratings and behaviors to you.\n          </p>\n    \n          <h3 class=\"info-heading\">Top 5 Recommendations with Scores</h3>\n          <div class=\"info-table-container\">\n            <table class=\"info-table\">\n              <thead>\n                <tr>\n                  <th>Product</th>\n                  <th>Rating Count</th>\n                  <th>Rating Score</th>\n                  <th>Avg Rating</th>\n                  <th>Total Score <p>(Rating Score * 1.4 <br>+<br> Avg Rating * 0.6)</p></th>\n                </tr>\n              </thead>\n              <tbody>\n                ${top5Recommendations.length > 0 ? top5Recommendations.map(product => {\n      const score = calculateScore(product, ranges);\n      return `\n                    <tr>\n                      <td title=\"${product.title}\" style=\"max-width:200px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;\">\n                        ${product.title}\n                      </td>\n                      <td>${formatNumber(product.ratingNumber)}</td>\n                      <td>${score.avgRating}</td>\n                      <td>${score.ratingNumberScore}</td>\n                      <td class=\"total-score\">\n                        ${score.totalScore}\n                      </td>\n                    </tr>\n                  `;\n    }).join('') : '<tr><td colspan=\"5\" style=\"text-align:center\">No recommendations available</td></tr>'}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      `,\n    width: 800,\n    confirmButtonText: 'Done!',\n    confirmButtonColor: '#046e8f'\n  });\n};\nconst UserRecommInfo = ({\n  recommendations,\n  triggerButton\n}) => {\n  return triggerButton ? /*#__PURE__*/React.cloneElement(triggerButton, {\n    onClick: () => showInfoModal(recommendations)\n  }) : null;\n};\n_c = UserRecommInfo;\nexport default UserRecommInfo;\nexport const showUserRecommInfo = showInfoModal;\nvar _c;\n$RefreshReg$(_c, \"UserRecommInfo\");","map":{"version":3,"names":["React","Swal","showInfoModal","recommendations","_top5Recommendations$","max","length","Math","map","rec","ratingNumber","topCap","smartRoundUp","step","floor","ranges","Array","from","_","i","min","maxVal","range","formatNumber","points","parseFloat","toFixed","reverse","top5Recommendations","slice","brandName","fire","title","html","r","join","product","score","calculateScore","avgRating","ratingNumberScore","totalScore","width","confirmButtonText","confirmButtonColor","UserRecommInfo","triggerButton","cloneElement","onClick","_c","showUserRecommInfo","$RefreshReg$"],"sources":["C:/Users/sunwa/Downloads/git/git1/Product/product/src/components/UserRecommInfo.js"],"sourcesContent":["import React from 'react';\r\nimport Swal from 'sweetalert2';\r\nimport './Info.css';\r\n\r\nconst showInfoModal = (recommendations) => {\r\n    const max = recommendations.length > 0\r\n      ? Math.max(...recommendations.map(rec => rec.ratingNumber))\r\n      : 0;\r\n  \r\n    const topCap = smartRoundUp(max); // clean round-up\r\n    const step = Math.floor(topCap / 10);\r\n  \r\n    const ranges = Array.from({ length: 10 }, (_, i) => {\r\n      const min = step * i;\r\n      const maxVal = step * (i + 1) - 1;\r\n      return {\r\n        range: `${formatNumber(maxVal)} - ${formatNumber(min)}`,\r\n        points: parseFloat(((i + 1) * 0.5).toFixed(1))\r\n      };\r\n    }).reverse();\r\n  \r\n    const top5Recommendations = recommendations.slice(0, 5);\r\n    const brandName = top5Recommendations[0]?.brandName || 'this brand';\r\n  \r\n    Swal.fire({\r\n      title: 'User Based Recommendation Summary',\r\n      html: `\r\n        <div style=\"text-align: left; max-height: 70vh; overflow-y: auto;\">\r\n          <h3 class=\"info-heading\">How Recommendations Work</h3>\r\n          <p>Our user-based recommendation system analyzes user behavior to suggest products that best match your interests. Here's how it works:</p>\r\n    \r\n          <ol>\r\n            <li><strong>Step 1: Find Other Users with Similar Ratings</strong><br />\r\n              We identify users who rated the same product as you.</li>\r\n            <li><strong>Step 2: Fetch Products Rated by These Users</strong><br />\r\n              We fetch products rated by these users within the same category as the product you viewed.</li>\r\n            <li><strong>Step 3: Filter Out Already Rated Products</strong><br />\r\n              We filter out products you’ve already rated to avoid recommending them again.</li>\r\n            <li><strong>Step 4: Rank Products by Popularity</strong><br />\r\n              Products are ranked by how many users rated them, prioritizing more popular products.</li>\r\n            <li><strong>Step 5: Recommend Top Products</strong><br />\r\n              We recommend the top products based on the number of users who rated them and their overall ratings.</li>\r\n          </ol>\r\n  \r\n          <h3 class=\"info-heading\">Scoring Pattern</h3>\r\n          <p>Recommendations are ranked based on user ratings and interactions with the product:</p>\r\n          <ul>\r\n            <li><strong>Same Rating Count:</strong> 5 points</li>\r\n            <li><strong>High Interaction Count:</strong> 4 points</li>\r\n            <li><strong>Low Interaction Count:</strong> 3 points</li>\r\n          </ul>\r\n  \r\n          <h3 class=\"info-heading\">Rating Count Range</h3>\r\n          <ul>\r\n            ${ranges.map(r => `<li>${r.range}: ${r.points} points</li>`).join('') || '<li>No data available</li>'}\r\n          </ul>\r\n  \r\n          <h3 class=\"info-heading\">Why This Brand?</h3>\r\n          <p>\r\n            You're seeing products from <strong>${brandName}</strong> because our analysis shows it's the brand most frequently interacted with by users who share similar ratings and behaviors to you.\r\n          </p>\r\n    \r\n          <h3 class=\"info-heading\">Top 5 Recommendations with Scores</h3>\r\n          <div class=\"info-table-container\">\r\n            <table class=\"info-table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Product</th>\r\n                  <th>Rating Count</th>\r\n                  <th>Rating Score</th>\r\n                  <th>Avg Rating</th>\r\n                  <th>Total Score <p>(Rating Score * 1.4 <br>+<br> Avg Rating * 0.6)</p></th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                ${top5Recommendations.length > 0 ? top5Recommendations.map(product => {\r\n                  const score = calculateScore(product, ranges);\r\n                  return `\r\n                    <tr>\r\n                      <td title=\"${product.title}\" style=\"max-width:200px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;\">\r\n                        ${product.title}\r\n                      </td>\r\n                      <td>${formatNumber(product.ratingNumber)}</td>\r\n                      <td>${score.avgRating}</td>\r\n                      <td>${score.ratingNumberScore}</td>\r\n                      <td class=\"total-score\">\r\n                        ${score.totalScore}\r\n                      </td>\r\n                    </tr>\r\n                  `;\r\n                }).join('') : '<tr><td colspan=\"5\" style=\"text-align:center\">No recommendations available</td></tr>'}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      `,\r\n      width: 800,\r\n      confirmButtonText: 'Done!',\r\n      confirmButtonColor: '#046e8f',\r\n    });\r\n  };\r\n  \r\nconst UserRecommInfo = ({ recommendations, triggerButton }) => {\r\n  return triggerButton\r\n    ? React.cloneElement(triggerButton, {\r\n        onClick: () => showInfoModal(recommendations)\r\n      })\r\n    : null;\r\n};\r\n\r\nexport default UserRecommInfo;\r\nexport const showUserRecommInfo = showInfoModal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}