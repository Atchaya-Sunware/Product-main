{"ast":null,"code":"import React from 'react';\nimport Swal from 'sweetalert2';\nimport './Info.css';\n\n// Round up to the nearest clean boundary (like 1000, 10000)\nconst smartRoundUp = value => {\n  const base = Math.pow(10, Math.max(2, value.toString().length - 1));\n  const upper = Math.ceil(value / base) * base;\n  const cleaner = Math.ceil(upper / 1000) * 1000;\n  return cleaner;\n};\n\n// Format number with commas\nconst formatNumber = num => new Intl.NumberFormat('en-US', {\n  maximumFractionDigits: 0\n}).format(num);\n\n// Score logic per product\nconst calculateScore = (product, ranges) => {\n  var _ranges$find;\n  const ratingNumberScore = ((_ranges$find = ranges.find(r => {\n    const [maxVal, minVal] = r.range.split(' - ').map(x => Number(x.replace(/,/g, '')));\n    return product.ratingNumber >= minVal && product.ratingNumber <= maxVal;\n  })) === null || _ranges$find === void 0 ? void 0 : _ranges$find.points) || 0;\n  const avgRating = parseFloat(product.averageRating.toFixed(1));\n  const totalScore = parseFloat((ratingNumberScore * 1.4 + avgRating * 0.6).toFixed(2));\n  return {\n    ratingNumberScore,\n    avgRating,\n    totalScore\n  };\n};\n\n// Show modal with recommendation info\nconst showInfoModal = recommendations => {\n  var _top5Recommendations$, _top5Recommendations$2;\n  const max = recommendations.length > 0 ? Math.max(...recommendations.map(rec => rec.ratingNumber)) : 0;\n  const topCap = smartRoundUp(max); // clean round-up\n  const step = Math.floor(topCap / 10);\n  const ranges = Array.from({\n    length: 10\n  }, (_, i) => {\n    const min = step * i;\n    const maxVal = step * (i + 1) - 1;\n    return {\n      range: `${formatNumber(maxVal)} - ${formatNumber(min)}`,\n      points: parseFloat(((i + 1) * 0.5).toFixed(1))\n    };\n  }).reverse();\n  const top5Recommendations = recommendations.slice(0, 5);\n  const brandName = ((_top5Recommendations$ = top5Recommendations[0]) === null || _top5Recommendations$ === void 0 ? void 0 : _top5Recommendations$.brandName) || 'this brand';\n  const interactionCount = ((_top5Recommendations$2 = top5Recommendations[0]) === null || _top5Recommendations$2 === void 0 ? void 0 : _top5Recommendations$2.sharedUserCount) || 'multiple';\n  Swal.fire({\n    title: 'User Based Recommendation Summary',\n    html: `\n      <div style=\"text-align: left; max-height: 70vh; overflow-y: auto;\">\n        <h3 class=\"info-heading\">How Recommendations Work</h3>\n        <p>Our user-based recommendation system analyzes user behavior to suggest products that best match your interests. Here's how it works:</p>\n  \n        <ol>\n          <li><strong>Step 1: Find Other Users with Similar Ratings</strong><br />\n            We identify users who rated the same product as you.</li>\n          <li><strong>Step 2: Fetch Products Rated by These Users</strong><br />\n            We fetch products rated by these users within the same category as the product you viewed.</li>\n          <li><strong>Step 3: Filter Out Already Rated Products</strong><br />\n            We filter out products you’ve already rated to avoid recommending them again.</li>\n          <li><strong>Step 4: Rank Products by Popularity</strong><br />\n            Products are ranked by how many users rated them, prioritizing more popular products.</li>\n          <li><strong>Step 5: Recommend Top Products</strong><br />\n            We recommend the top products based on the number of users who rated them and their overall ratings.</li>\n        </ol>\n  \n        <h3 class=\"info-heading\">Scoring Pattern</h3>\n        <p>Recommendations are ranked based on user ratings and interactions with the product:</p>\n        <ul>\n          <li><strong>Same Rating Count:</strong> 5 points</li>\n          <li><strong>High Interaction Count:</strong> 4 points</li>\n          <li><strong>Low Interaction Count:</strong> 3 points</li>\n        </ul>\n\n        <h3 class=\"info-heading\">Why This Brand?</h3>\n        <p>\n          You're seeing products from <strong>${brandName}</strong> because our analysis shows it's the brand most frequently interacted with by users who share similar ratings and behaviors to you.\n        </p>\n  \n        <h3 class=\"info-heading\">Top 5 Recommendations with Scores</h3>\n        <div class=\"info-table-container\">\n          <table class=\"info-table\">\n            <thead>\n              <tr>\n                <th>Product</th>\n                <th>Rating Count</th>\n                <th>Rating Score</th>\n                <th>Avg Rating</th>\n                <th>Total Score <p>(Rating Score * 1.4 <br>+<br> Avg Rating * 0.6)</p></th>\n              </tr>\n            </thead>\n            <tbody>\n              ${top5Recommendations.length > 0 ? top5Recommendations.map(product => {\n      const score = calculateScore(product, ranges);\n      return `\n                  <tr>\n                    <td title=\"${product.title}\" style=\"max-width:200px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;\">\n                      ${product.title}\n                    </td>\n                    <td>${formatNumber(product.ratingNumber)}</td>\n                    <td>${score.avgRating}</td>\n                    <td>${score.ratingNumberScore}</td>\n                    <td class=\"total-score\">\n                      ${score.totalScore}\n                    </td>\n                  </tr>\n                `;\n    }).join('') : '<tr><td colspan=\"5\" style=\"text-align:center\">No recommendations available</td></tr>'}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    `,\n    width: 800,\n    confirmButtonText: 'Done!',\n    confirmButtonColor: '#046e8f'\n  });\n};\nconst UserRecommInfo = ({\n  recommendations,\n  triggerButton\n}) => {\n  return triggerButton ? /*#__PURE__*/React.cloneElement(triggerButton, {\n    onClick: () => showInfoModal(recommendations)\n  }) : null;\n};\n_c = UserRecommInfo;\nexport default UserRecommInfo;\nexport const showUserRecommInfo = showInfoModal;\nvar _c;\n$RefreshReg$(_c, \"UserRecommInfo\");","map":{"version":3,"names":["React","Swal","smartRoundUp","value","base","Math","pow","max","toString","length","upper","ceil","cleaner","formatNumber","num","Intl","NumberFormat","maximumFractionDigits","format","calculateScore","product","ranges","_ranges$find","ratingNumberScore","find","r","maxVal","minVal","range","split","map","x","Number","replace","ratingNumber","points","avgRating","parseFloat","averageRating","toFixed","totalScore","showInfoModal","recommendations","_top5Recommendations$","_top5Recommendations$2","rec","topCap","step","floor","Array","from","_","i","min","reverse","top5Recommendations","slice","brandName","interactionCount","sharedUserCount","fire","title","html","score","join","width","confirmButtonText","confirmButtonColor","UserRecommInfo","triggerButton","cloneElement","onClick","_c","showUserRecommInfo","$RefreshReg$"],"sources":["C:/Users/sunwa/Downloads/git/git1/Product/product/src/components/UserRecommInfo.js"],"sourcesContent":["import React from 'react';\r\nimport Swal from 'sweetalert2';\r\nimport './Info.css';\r\n\r\n// Round up to the nearest clean boundary (like 1000, 10000)\r\nconst smartRoundUp = (value) => {\r\n  const base = Math.pow(10, Math.max(2, value.toString().length - 1));\r\n  const upper = Math.ceil(value / base) * base;\r\n  const cleaner = Math.ceil(upper / 1000) * 1000;\r\n  return cleaner;\r\n};\r\n\r\n// Format number with commas\r\nconst formatNumber = (num) =>\r\n  new Intl.NumberFormat('en-US', { maximumFractionDigits: 0 }).format(num);\r\n\r\n// Score logic per product\r\nconst calculateScore = (product, ranges) => {\r\n  const ratingNumberScore = ranges.find(r => {\r\n    const [maxVal, minVal] = r.range.split(' - ').map(x => Number(x.replace(/,/g, '')));\r\n    return product.ratingNumber >= minVal && product.ratingNumber <= maxVal;\r\n  })?.points || 0;\r\n\r\n  const avgRating = parseFloat(product.averageRating.toFixed(1));\r\n  const totalScore = parseFloat(((ratingNumberScore * 1.4) + (avgRating * 0.6)).toFixed(2));\r\n\r\n  return {\r\n    ratingNumberScore,\r\n    avgRating,\r\n    totalScore\r\n  };\r\n};\r\n\r\n// Show modal with recommendation info\r\nconst showInfoModal = (recommendations) => {\r\n  const max = recommendations.length > 0\r\n    ? Math.max(...recommendations.map(rec => rec.ratingNumber))\r\n    : 0;\r\n\r\n  const topCap = smartRoundUp(max); // clean round-up\r\n  const step = Math.floor(topCap / 10);\r\n\r\n  const ranges = Array.from({ length: 10 }, (_, i) => {\r\n    const min = step * i;\r\n    const maxVal = step * (i + 1) - 1;\r\n    return {\r\n      range: `${formatNumber(maxVal)} - ${formatNumber(min)}`,\r\n      points: parseFloat(((i + 1) * 0.5).toFixed(1))\r\n    };\r\n  }).reverse();\r\n\r\n  const top5Recommendations = recommendations.slice(0, 5);\r\n  const brandName = top5Recommendations[0]?.brandName || 'this brand';\r\n  const interactionCount = top5Recommendations[0]?.sharedUserCount || 'multiple';\r\n\r\n  Swal.fire({\r\n    title: 'User Based Recommendation Summary',\r\n    html: `\r\n      <div style=\"text-align: left; max-height: 70vh; overflow-y: auto;\">\r\n        <h3 class=\"info-heading\">How Recommendations Work</h3>\r\n        <p>Our user-based recommendation system analyzes user behavior to suggest products that best match your interests. Here's how it works:</p>\r\n  \r\n        <ol>\r\n          <li><strong>Step 1: Find Other Users with Similar Ratings</strong><br />\r\n            We identify users who rated the same product as you.</li>\r\n          <li><strong>Step 2: Fetch Products Rated by These Users</strong><br />\r\n            We fetch products rated by these users within the same category as the product you viewed.</li>\r\n          <li><strong>Step 3: Filter Out Already Rated Products</strong><br />\r\n            We filter out products you’ve already rated to avoid recommending them again.</li>\r\n          <li><strong>Step 4: Rank Products by Popularity</strong><br />\r\n            Products are ranked by how many users rated them, prioritizing more popular products.</li>\r\n          <li><strong>Step 5: Recommend Top Products</strong><br />\r\n            We recommend the top products based on the number of users who rated them and their overall ratings.</li>\r\n        </ol>\r\n  \r\n        <h3 class=\"info-heading\">Scoring Pattern</h3>\r\n        <p>Recommendations are ranked based on user ratings and interactions with the product:</p>\r\n        <ul>\r\n          <li><strong>Same Rating Count:</strong> 5 points</li>\r\n          <li><strong>High Interaction Count:</strong> 4 points</li>\r\n          <li><strong>Low Interaction Count:</strong> 3 points</li>\r\n        </ul>\r\n\r\n        <h3 class=\"info-heading\">Why This Brand?</h3>\r\n        <p>\r\n          You're seeing products from <strong>${brandName}</strong> because our analysis shows it's the brand most frequently interacted with by users who share similar ratings and behaviors to you.\r\n        </p>\r\n  \r\n        <h3 class=\"info-heading\">Top 5 Recommendations with Scores</h3>\r\n        <div class=\"info-table-container\">\r\n          <table class=\"info-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Product</th>\r\n                <th>Rating Count</th>\r\n                <th>Rating Score</th>\r\n                <th>Avg Rating</th>\r\n                <th>Total Score <p>(Rating Score * 1.4 <br>+<br> Avg Rating * 0.6)</p></th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              ${top5Recommendations.length > 0 ? top5Recommendations.map(product => {\r\n                const score = calculateScore(product, ranges);\r\n                return `\r\n                  <tr>\r\n                    <td title=\"${product.title}\" style=\"max-width:200px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;\">\r\n                      ${product.title}\r\n                    </td>\r\n                    <td>${formatNumber(product.ratingNumber)}</td>\r\n                    <td>${score.avgRating}</td>\r\n                    <td>${score.ratingNumberScore}</td>\r\n                    <td class=\"total-score\">\r\n                      ${score.totalScore}\r\n                    </td>\r\n                  </tr>\r\n                `;\r\n              }).join('') : '<tr><td colspan=\"5\" style=\"text-align:center\">No recommendations available</td></tr>'}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    `,\r\n    width: 800,\r\n    confirmButtonText: 'Done!',\r\n    confirmButtonColor: '#046e8f',\r\n  });\r\n};\r\n\r\nconst UserRecommInfo = ({ recommendations, triggerButton }) => {\r\n  return triggerButton\r\n    ? React.cloneElement(triggerButton, {\r\n        onClick: () => showInfoModal(recommendations)\r\n      })\r\n    : null;\r\n};\r\n\r\nexport default UserRecommInfo;\r\nexport const showUserRecommInfo = showInfoModal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}